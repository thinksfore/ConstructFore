using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Web;

namespace ConstructFore.admin.Handlers
{
    /// <summary>
    /// Summary description for FilesUpload
    /// </summary>
    public class FilesUpload : IHttpHandler
    {

        public void ProcessRequest(HttpContext context)
        {
            var requestType = context.Request.QueryString["q"];
            switch (requestType)
            {
                case "ImageUpload":
                    ImageUpload(context);
                    break;
            }
            //ImageUpload(context);
        }
        public void ImageUpload(HttpContext context)
        {
            try
            {
                string fileName = "", path = "", thumbFileName = "";
                string imageType = context.Request.QueryString["type"];
                int imageId = Convert.ToInt32(context.Request.QueryString["ImageId"]);
                int IsHome = Convert.ToInt32(context.Request.QueryString["IsHome"]);
                int result = 0;
                result = RemoveImage(Convert.ToString(imageId));
                if (result >= 0)
                {
                    if (!Directory.Exists(context.Server.MapPath("~/MasterImages")))
                        Directory.CreateDirectory(context.Server.MapPath("~/MasterImages"));
                    path = context.Server.MapPath("~/MasterImages");
                    if (context.Request.Files.Count > 0)
                    {
                        var tsavepath = "";
                        var savepath = "";
                        HttpFileCollection files = context.Request.Files;
                        for (int i = 0; i < files.Count; i++)
                        {
                            HttpPostedFile file = files[i];
                            FileInfo fi = new FileInfo(file.FileName);
                            string ext = fi.Extension;
                            
                            fileName = imageId + "_Home" + ext;
                            savepath = String.Format("{0}\\{1}", path, fileName);
                            file.SaveAs(savepath);
                            savepath = "..//MasterImages//" + fileName;
                            
                            if (IsHome == 1)
                            {
                                thumbFileName = imageId + "_Home_thumbnail" + ext;
                                tsavepath = String.Format("{0}\\{1}", path, thumbFileName);

                                //--------- thumbnail image resize for
                                var reImgPath = context.Server.MapPath("~/MasterImages/"+ fileName);
                                Bitmap bm = new Bitmap(reImgPath);
                                Image image = (Image)resizeImage(bm, new Size(530, 530));
                                image.Save(tsavepath);

                                tsavepath = "..//MasterImages//"+ thumbFileName;
                                fileName = imageId + "_Home" + ext;
                            }
                        }

                        //---------update image path
                        ImageMasterModel img = new ImageMasterModel();
                        ImageInfo info = new ImageInfo();
                        info.ImageId = imageId;
                        info.ImagePath = savepath;
                        info.ThumbnailImagePath = tsavepath;
                        info.HomeImageStatus = IsHome;
                        info.UploadType = 1;
                        result = img.UpdateImageInfo(info);

                        context.Response.ContentType = "text/plain";
                        context.Response.Write(result);

                    }
                    else
                    {
                        context.Response.Write(-1);
                    }
                }
                else
                {
                    context.Response.Write(-2);
                }
            }
            catch (Exception ex)
            {
                context.Response.Write(0);
            }
            context.Response.End();
        }

        public static Image resizeImage(Image imgToResize, Size size)
        {
            return (Image)(new Bitmap(imgToResize, size));
        }
        public int RemoveImage(string ImageId)
        {
            int result = 0;
            try
            {
                string partialName = ImageId + "_";
                string serverPath = System.Web.Hosting.HostingEnvironment.MapPath("~/MasterImages");
                if (Directory.Exists(@serverPath))
                {
                    DirectoryInfo hdDirectoryInWhichToSearch = new DirectoryInfo(@serverPath);
                    //FileInfo[] filesInDir = hdDirectoryInWhichToSearch.GetFiles("*" + partialName + "*.*");
                    FileInfo[] filesInDir = hdDirectoryInWhichToSearch.GetFiles("*" + partialName + "*");
                    foreach (FileInfo foundFile in filesInDir)
                    {
                        if (File.Exists(foundFile.FullName))
                        {
                            File.Delete(foundFile.FullName);
                        }
                    }
                    result = 1;
                }
                return result;
            }
            catch (Exception ex)
            {
                return -1;
            }

        }

        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}
